{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lenovo/Desktop/intern/assignment/finance-tracker/lib/mongodb.ts"],"sourcesContent":["import mongoose from \"mongoose\"\r\n\r\ntype GlobalMongoose = {\r\n  conn: typeof mongoose | null\r\n  promise: Promise<typeof mongoose> | null\r\n}\r\n\r\ndeclare global {\r\n  var mongoose: GlobalMongoose | undefined\r\n}\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"Please provide a MongoDB URI\")\r\n}\r\n\r\nconst cached: GlobalMongoose = global.mongoose ?? { conn: null, promise: null }\r\nglobal.mongoose = cached\r\n\r\nexport async function connectToDatabase(uri?: string) {\r\n  try {\r\n    const mongoUri = uri || MONGODB_URI\r\n    if (cached.conn) {\r\n      return cached.conn\r\n    }\r\n\r\n    if (!cached.promise) {\r\n      const opts = {\r\n        bufferCommands: false,\r\n        serverSelectionTimeoutMS: 5000,\r\n        connectTimeoutMS: 10000,\r\n        socketTimeoutMS: 45000,\r\n      }\r\n\r\n      cached.promise = mongoose.connect(mongoUri!, opts)\r\n    }\r\n\r\n    cached.conn = await cached.promise\r\n    return cached.conn\r\n  } catch (error) {\r\n    console.error('MongoDB connection error:', error)\r\n    throw error\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAWA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,SAAyB,OAAO,QAAQ,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAC9E,OAAO,QAAQ,GAAG;AAEX,eAAe,kBAAkB,GAAY;IAClD,IAAI;QACF,MAAM,WAAW,OAAO;QACxB,IAAI,OAAO,IAAI,EAAE;YACf,OAAO,OAAO,IAAI;QACpB;QAEA,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,MAAM,OAAO;gBACX,gBAAgB;gBAChB,0BAA0B;gBAC1B,kBAAkB;gBAClB,iBAAiB;YACnB;YAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,UAAW;QAC/C;QAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;QAClC,OAAO,OAAO,IAAI;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lenovo/Desktop/intern/assignment/finance-tracker/lib/models.ts"],"sourcesContent":["import mongoose from \"mongoose\"\r\n\r\n// Define Category Schema\r\nconst categorySchema = new mongoose.Schema(\r\n  {\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n      trim: true,\r\n    },\r\n    color: {\r\n      type: String,\r\n      required: true,\r\n      default: \"#94a3b8\", // Default slate color\r\n    },\r\n    icon: {\r\n      type: String,\r\n      default: \"circle\",\r\n    },\r\n    type: {\r\n      type: String,\r\n      enum: [\"income\", \"expense\"],\r\n      required: true,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  },\r\n)\r\n\r\n// Define Transaction Schema\r\nconst transactionSchema = new mongoose.Schema(\r\n  {\r\n    amount: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    description: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    date: {\r\n      type: Date,\r\n      required: true,\r\n      default: Date.now,\r\n    },\r\n    type: {\r\n      type: String,\r\n      enum: [\"income\", \"expense\"],\r\n      required: true,\r\n    },\r\n    category: {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: \"Category\",\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  },\r\n)\r\n\r\n// Create or retrieve models\r\nexport const Category = mongoose.models.Category || mongoose.model(\"Category\", categorySchema)\r\nexport const Transaction = mongoose.models.Transaction || mongoose.model(\"Transaction\", transactionSchema)\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,yBAAyB;AACzB,MAAM,iBAAiB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CACxC;IACE,MAAM;QACJ,MAAM;QACN,UAAU;QACV,MAAM;IACR;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAU;SAAU;QAC3B,UAAU;IACZ;AACF,GACA;IACE,YAAY;AACd;AAGF,4BAA4B;AAC5B,MAAM,oBAAoB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAC3C;IACE,QAAQ;QACN,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACnB;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAU;SAAU;QAC3B,UAAU;IACZ;IACA,UAAU;QACR,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;IACP;AACF,GACA;IACE,YAAY;AACd;AAIK,MAAM,WAAW,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,YAAY;AACxE,MAAM,cAAc,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,eAAe","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lenovo/Desktop/intern/assignment/finance-tracker/lib/data.ts"],"sourcesContent":["import { connectToDatabase } from \"@/lib/mongodb\"\r\nimport { Transaction, Category } from \"@/lib/models\"\r\nimport type { Transaction as TransactionType, Category as CategoryType, FinanceSummary } from \"@/lib/types\"\r\n\r\nexport async function getTransactions(limit?: number): Promise<TransactionType[]> {\r\n  try {\r\n    await connectToDatabase()\r\n\r\n    let query = Transaction.find().populate(\"category\").sort({ date: -1 })\r\n\r\n    if (limit) {\r\n      query = query.limit(limit)\r\n    }\r\n\r\n    const transactions = await query.exec()\r\n\r\n    return JSON.parse(JSON.stringify(transactions))\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch transactions:\", error)\r\n    return []\r\n  }\r\n}\r\n\r\nexport async function getTransactionById(id: string): Promise<TransactionType | null> {\r\n  try {\r\n    await connectToDatabase()\r\n    const transaction = await Transaction.findById(id).populate(\"category\")\r\n\r\n    if (!transaction) {\r\n      return null\r\n    }\r\n\r\n    return JSON.parse(JSON.stringify(transaction))\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch transaction:\", error)\r\n    return null\r\n  }\r\n}\r\n\r\nexport async function getCategories(): Promise<CategoryType[]> {\r\n  try {\r\n    await connectToDatabase()\r\n    const categories = await Category.find().sort({ name: 1 })\r\n\r\n    return JSON.parse(JSON.stringify(categories))\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch categories:\", error)\r\n    return []\r\n  }\r\n}\r\n\r\nexport async function getCategoryById(id: string): Promise<CategoryType | null> {\r\n  try {\r\n    await connectToDatabase()\r\n    const category = await Category.findById(id)\r\n\r\n    if (!category) {\r\n      return null\r\n    }\r\n\r\n    return JSON.parse(JSON.stringify(category))\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch category:\", error)\r\n    return null\r\n  }\r\n}\r\n\r\nexport async function getFinanceSummary(): Promise<FinanceSummary> {\r\n  try {\r\n    await connectToDatabase()\r\n\r\n    // Get all transactions\r\n    const transactions = await Transaction.find().populate(\"category\")\r\n\r\n    // Calculate total income and expenses\r\n    let totalIncome = 0\r\n    let totalExpenses = 0\r\n\r\n    transactions.forEach((transaction) => {\r\n      if (transaction.amount > 0) {\r\n        totalIncome += transaction.amount\r\n      } else {\r\n        totalExpenses += Math.abs(transaction.amount)\r\n      }\r\n    })\r\n\r\n    // Calculate category summaries\r\n    const categoryMap = new Map()\r\n\r\n    transactions.forEach((transaction) => {\r\n      if (!transaction.category) return\r\n\r\n      const categoryId = transaction.category._id.toString()\r\n      const amount = Math.abs(transaction.amount)\r\n\r\n      if (!categoryMap.has(categoryId)) {\r\n        categoryMap.set(categoryId, {\r\n          _id: categoryId,\r\n          name: transaction.category.name,\r\n          color: transaction.category.color,\r\n          icon: transaction.category.icon,\r\n          total: 0,\r\n        })\r\n      }\r\n\r\n      categoryMap.get(categoryId).total += amount\r\n    })\r\n\r\n    // Convert to array and calculate percentages\r\n    const categorySummaries = Array.from(categoryMap.values())\r\n    const totalAmount = totalIncome + totalExpenses\r\n\r\n    categorySummaries.forEach((category) => {\r\n      category.percentage = totalAmount > 0 ? (category.total / totalAmount) * 100 : 0\r\n    })\r\n\r\n    // Sort by total amount (descending)\r\n    categorySummaries.sort((a, b) => b.total - a.total)\r\n\r\n    return {\r\n      totalIncome,\r\n      totalExpenses,\r\n      balance: totalIncome - totalExpenses,\r\n      categorySummaries,\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch finance summary:\", error)\r\n    return {\r\n      totalIncome: 0,\r\n      totalExpenses: 0,\r\n      balance: 0,\r\n      categorySummaries: [],\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/lenovo/Desktop/intern/assignment/finance-tracker/app/api/summary/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport { getFinanceSummary } from \"@/lib/data\"\r\n\r\nexport async function GET() {\r\n  try {\r\n    const summary = await getFinanceSummary()\r\n    return NextResponse.json(summary)\r\n  } catch (error) {\r\n    return NextResponse.json({ error: \"Failed to fetch summary\" }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,6GAAA,CAAA,oBAAiB,AAAD;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}}]
}